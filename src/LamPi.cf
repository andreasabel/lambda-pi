-- Dependently typed lambda calculus with definitions.
-- Syntax compatible with Agda.

-- A file is a list of declarations that are either postulates or definitions.

layout toplevel;
layout "postulate";

entrypoints [Decl];

Block. Block ::= "{" [Decl] "}" ;
separator Decl ";";

DAx.   Decl ::= "postulate" Block;
DDecl. Decl ::= Ident ":" Exp ;
DDef.  Decl ::= [Ident] "=" Exp ;
  -- The first name in [Ident] is the name of the defintion
  -- the rest are parameters to be lambda-abstracted.

-- Expressions

EType.  Exp3 ::= Univ;
EId.    Exp3 ::= Ident;
EApp.   Exp2 ::= Exp2 Exp3;
EFun.   Exp  ::= Exp1 "→" Exp;
EAbs.   Exp  ::= "λ" [Ident] "→" Exp;
EPi.    Exp  ::= "(" Ident ":" Exp ")" "→" Exp;

coercions Exp 3;
separator nonempty Ident "";

-- Universes

token Univ {"Set"} (digit *);

comment "--";
comment "{-" "-}";
